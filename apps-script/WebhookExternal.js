/**
 * PDC Smart Motor Repair - External OA Webhook Handler
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Events ‡∏à‡∏≤‡∏Å External LINE OA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */

/**
 * Handle External Message Event
 */
function handleExternalMessage(text, textLower, userId, replyToken) {
  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ lowercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
  if (text.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') || textLower.includes('status')) {
    handleStatusCommand(userId, replyToken);
  } else if (text.includes('‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') || textLower.includes('my jobs')) {
    handleMyJobsCommand(userId, replyToken);
  } else if (text.includes('‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤') || textLower.includes('quotation')) {
    handleQuotationCommand(userId, replyToken);
  } else if (text.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') || textLower.includes('help')) {
    handleExternalHelp(replyToken);
  } else {
    // Default response - ‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const response = {
      type: 'text',
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n' +
            '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ PDC Motor Repair\n\n' +
            'üìñ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
            '‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö'
    };
    
    try {
      replyMessage(replyToken, [response], false);
      Logger.log('‚úÖ replyMessage completed');
    } catch (error) {
      Logger.log('‚ùå replyMessage error: ' + error.message);
      console.error('replyMessage error:', error);
    }
  }
}

/**
 * External Help Command
 */
function handleExternalHelp(replyToken) {
  const response = {
    type: 'text',
    text: 'üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n' +
          '‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n' +
          '‚Ä¢ "‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" - ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
          '‚Ä¢ "‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤" - ‡∏î‡∏π‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n' +
          '‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n' +
          '‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!'
  };
  
  replyMessage(replyToken, [response], false);
}

/**
 * Handle Status Command (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleStatusCommand(userId, replyToken) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å line_user_id
    const jobs = getJobsByLineUserId(userId);
    
    if (jobs.length === 0) {
      const response = {
        type: 'text',
        text: 'üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n' +
              '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n' +
              'üìû ‡πÇ‡∏ó‡∏£: 02-xxx-xxxx'
      };
      replyMessage(replyToken, [response], false);
      return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const job = jobs[0]; // ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const milestone = getMilestoneDisplayText(job.milestone);
    
    const response = {
      type: 'text',
      text: `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô\n\n` +
            `üìã ${job.job_id}\n` +
            `‚öôÔ∏è ${job.asset_desc}\n` +
            `üè≠ ${job.brand} ${job.model || ''}\n` +
            `üìç ${milestone}\n` +
            `üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: ${formatDate(job.eta_finish)}\n\n` +
            `üí° ‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`
    };
    
    replyMessage(replyToken, [response], false);
  } catch (error) {
    logError('handleStatusCommand error', { userId: userId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }], false);
  }
}

/**
 * Handle My Jobs Command (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleMyJobsCommand(userId, replyToken) {
  try {
    const jobs = getJobsByLineUserId(userId);
    
    if (jobs.length === 0) {
      const response = {
        type: 'text',
        text: 'üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n' +
              '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n' +
              'üìû ‡πÇ‡∏ó‡∏£: 02-xxx-xxxx'
      };
      replyMessage(replyToken, [response], false);
      return;
    }
    
    let text = `üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (${jobs.length}):\n\n`;
    jobs.forEach((job, index) => {
      text += `${index + 1}. ${job.job_id}\n`;
      text += `   ‚öôÔ∏è ${job.asset_desc}\n`;
      text += `   üìç ${getMilestoneDisplayText(job.milestone)}\n`;
      text += `   üìÖ ${formatDate(job.eta_finish)}\n\n`;
    });
    
    text += `üí° ‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`;
    
    const response = {
      type: 'text',
      text: text
    };
    
    replyMessage(replyToken, [response], false);
  } catch (error) {
    logError('handleMyJobsCommand error', { userId: userId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }], false);
  }
}

/**
 * Handle Quotation Command (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleQuotationCommand(userId, replyToken) {
  try {
    const jobs = getJobsByLineUserId(userId);
    
    if (jobs.length === 0) {
      replyMessage(replyToken, [{
        type: 'text',
        text: 'üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤'
      }], false);
      return;
    }
    
    // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ quotation ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const jobsWithQuotation = jobs.filter(j => j.quotation_no);
    
    if (jobsWithQuotation.length === 0) {
      replyMessage(replyToken, [{
        type: 'text',
        text: 'üîç ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤\n‡∏£‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö'
      }], false);
      return;
    }
    
    const job = jobsWithQuotation[0];
    
    let text = `üìÑ ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤\n\n`;
    text += `üìã ${job.quotation_no}\n`;
    text += `‚öôÔ∏è ${job.asset_desc}\n`;
    text += `üí∞ ‡∏ø${(job.quotation_amount || 0).toLocaleString()}\n`;
    text += `üìÖ ${formatDate(job.quotation_sent_at)}\n\n`;
    
    if (job.status === CONFIG.STATUS.PENDING_APPROVAL) {
      text += `‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\n\n`;
      text += `‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π "‡∏î‡∏π‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`;
    } else if (job.status === CONFIG.STATUS.APPROVED) {
      text += `‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß\n`;
      text += `üìÖ ${formatDate(job.approved_at)}`;
    }
    
    replyMessage(replyToken, [{ type: 'text', text: text }], false);
  } catch (error) {
    logError('handleQuotationCommand error', { userId: userId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }], false);
  }
}

/**
 * Handle Approve Quotation (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleApproveQuotation(userId, jobId, replyToken) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Customer
    const customer = getCustomerByLineUserId(userId);
    
    if (!customer) {
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢'
      }], false);
      return;
    }
    
    // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    const result = approveQuotation(jobId, userId, 'Approved by customer via LINE');
    
    if (result.success) {
      const response = {
        type: 'text',
        text: '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n' +
              `üìã ${jobId}\n` +
              `üí∞ ‡∏ø${(result.amount || 0).toLocaleString()}\n\n` +
              '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ\n' +
              '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤\n\n' +
              'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: 02-xxx-xxxx'
      };
      
      replyMessage(replyToken, [response], false);
      
      // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô (Internal OA)
      notifyInternalTeam(jobId, 'quotation_approved', {
        customer: customer.company,
        job_id: jobId
      });
    } else {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ\n${result.error || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢'}`
      }], false);
    }
  } catch (error) {
    logError('handleApproveQuotation error', { 
      userId: userId, 
      jobId: jobId, 
      error: error.message 
    });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢'
    }], false);
  }
}

/**
 * Handle Reject Quotation (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleRejectQuotation(userId, jobId, replyToken) {
  try {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    updateJobStatus(jobId, CONFIG.STATUS.CANCELLED, 'Customer (LINE)');
    
    // Log event
    logJobEvent(jobId, 'quotation_rejected', 'Customer', { line_user_id: userId });
    
    const response = {
      type: 'text',
      text: 'üìù ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n' +
            `üìã ${jobId}\n\n` +
            '‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô\n' +
            '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢\n\n' +
            'üìû ‡πÇ‡∏ó‡∏£: 02-xxx-xxxx'
    };
    
    replyMessage(replyToken, [response], false);
    
    // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
    notifyInternalTeam(jobId, 'quotation_rejected', {
      job_id: jobId
    });
  } catch (error) {
    logError('handleRejectQuotation error', { 
      userId: userId, 
      jobId: jobId, 
      error: error.message 
    });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢'
    }], false);
  }
}

/**
 * Handle External Postback (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleExternalPostback(action, jobId, userId, replyToken, data) {
  switch (action) {
    case 'approve':
      handleApproveQuotation(userId, jobId, replyToken);
      break;
      
    case 'reject':
      handleRejectQuotation(userId, jobId, replyToken);
      break;
      
    case 'view_pdf':
      handleViewPDFExternal(userId, jobId, data.type, replyToken);
      break;
      
    case 'view_photos':
      handleViewPhotos(userId, jobId, replyToken);
      break;
      
    case 'view_job':
      handleViewJobExternal(jobId, replyToken);
      break;
      
    case 'contact_sales':
      handleContactSales(replyToken);
      break;
      
    default:
      Logger.log('Unknown external postback action: ' + action);
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      }], false);
  }
}

/**
 * Handle View PDF External (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleViewPDFExternal(userId, jobId, type, replyToken) {
  try {
    const job = getJob(jobId);
    
    if (!job) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô: ${jobId}`
      }], false);
      return;
    }
    
    let pdfUrl = '';
    let pdfName = '';
    
    switch (type) {
      case 'quotation':
        pdfUrl = job.quotation_pdf;
        pdfName = '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤';
        break;
      case 'finalreport':
        pdfUrl = job.final_report_pdf;
        pdfName = '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢';
        break;
    }
    
    if (!pdfUrl) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ${pdfName}\n‡∏£‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö`
      }], false);
      return;
    }
    
    replyMessage(replyToken, [{
      type: 'text',
      text: `üìÑ ${pdfName}\n\n${jobId}\n\n‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π:\n${pdfUrl}`
    }], false);
  } catch (error) {
    logError('handleViewPDFExternal error', { 
      jobId: jobId, 
      type: type, 
      error: error.message 
    });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }], false);
  }
}

/**
 * Handle View Photos (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleViewPhotos(userId, jobId, replyToken) {
  try {
    const media = getJobMedia(jobId);
    
    if (media.length === 0) {
      replyMessage(replyToken, [{
        type: 'text',
        text: 'üì∑ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n‡∏£‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö'
      }], false);
      return;
    }
    
    let text = `üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô (${media.length}):\n\n`;
    media.forEach((m, index) => {
      text += `${index + 1}. ${m.milestone}\n`;
      text += `   ${m.webapp_url}\n\n`;
    });
    
    replyMessage(replyToken, [{ type: 'text', text: text }], false);
  } catch (error) {
    logError('handleViewPhotos error', { jobId: jobId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }], false);
  }
}

/**
 * Handle View Job External (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
 */
function handleViewJobExternal(jobId, replyToken) {
  try {
    const job = getJob(jobId);
    
    if (!job) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô: ${jobId}`
      }], false);
      return;
    }
    
    let text = `üìã ${job.job_id}\n\n`;
    text += `‚öôÔ∏è ${job.asset_desc}\n`;
    text += `üè≠ ${job.brand} ${job.model || ''}\n`;
    text += `üìç ${getMilestoneDisplayText(job.milestone)}\n`;
    text += `üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: ${formatDate(job.eta_finish)}\n\n`;
    
    if (job.quotation_amount) {
      text += `üí∞ ${job.quotation_no}\n`;
      text += `   ‡∏ø${job.quotation_amount.toLocaleString()}\n\n`;
    }
    
    text += `üí° ‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`;
    
    replyMessage(replyToken, [{ type: 'text', text: text }], false);
  } catch (error) {
    logError('handleViewJobExternal error', { jobId: jobId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    }], false);
  }
}

/**
 * Handle Contact Sales
 */
function handleContactSales(replyToken) {
  const response = {
    type: 'text',
    text: 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢\n\n' +
          '‡πÇ‡∏ó‡∏£: 02-xxx-xxxx\n' +
          'Email: sales@pdc-motor.com\n' +
          'LINE ID: @pdcsales\n\n' +
          '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:\n' +
          '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 08:00-17:00\n' +
          '‡πÄ‡∏™‡∏≤‡∏£‡πå 08:00-12:00'
  };
  
  replyMessage(replyToken, [response], false);
}

/**
 * Handle External Follow Event (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ Add Friend)
 */
function handleExternalFollowEvent(userId, replyToken) {
  logInfo('üëã New external user (customer) followed!', { userId: userId });
  
  const welcomeMessage = {
    type: 'text',
    text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà PDC Smart Motor Repair!\n\n' +
          'üîß ‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á\n\n' +
          'üì± ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n' +
          '‚Ä¢ ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤\n' +
          '‚Ä¢ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤\n' +
          '‚Ä¢ ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤\n' +
          '‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢\n\n' +
          '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
          '‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!'
  };
  
  try {
    pushMessage(userId, [welcomeMessage], false);
    logInfo('‚úÖ External welcome message sent', { userId: userId });
  } catch (error) {
    logError('‚ùå Failed to send external welcome message', { 
      userId: userId, 
      error: error.message 
    });
  }
}

/**
 * Get Customer by LINE User ID
 */
function getCustomerByLineUserId(lineUserId) {
  try {
    const sheet = getSheet(CONFIG.SHEETS.CUSTOMERS);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const lineUserIdIndex = headers.indexOf('line_user_id');
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][lineUserIdIndex] === lineUserId) {
        return arrayToObject(headers, data[i]);
      }
    }
    
    return null;
  } catch (error) {
    logError('getCustomerByLineUserId error', { lineUserId: lineUserId, error: error.message });
    return null;
  }
}

/**
 * Get Jobs by LINE User ID (External - Customer)
 */
function getJobsByLineUserId(lineUserId) {
  try {
    // ‡∏´‡∏≤ Customer ID ‡∏à‡∏≤‡∏Å LINE User ID
    const customer = getCustomerByLineUserId(lineUserId);
    
    if (!customer) {
      return [];
    }
    
    // ‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Customer
    const sheet = getSheet(CONFIG.SHEETS.JOBS);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const customerIdIndex = headers.indexOf('customer_id');
    
    const jobs = [];
    for (let i = 1; i < data.length; i++) {
      if (data[i][customerIdIndex] === customer.customer_id) {
        jobs.push(arrayToObject(headers, data[i]));
      }
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° created_at (‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
    jobs.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    
    return jobs;
  } catch (error) {
    logError('getJobsByLineUserId error', { lineUserId: lineUserId, error: error.message });
    return [];
  }
}

/**
 * Notify Internal Team
 */
function notifyInternalTeam(jobId, eventType, data) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const userSheet = getSheet(CONFIG.SHEETS.USERS);
    const userData = userSheet.getDataRange().getValues();
    const headers = userData[0];
    const roleIndex = headers.indexOf('role');
    const lineUserIdIndex = headers.indexOf('internal_line_user_id');
    
    // ‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (Manager, Planner)
    const targetUsers = [];
    for (let i = 1; i < userData.length; i++) {
      const role = userData[i][roleIndex];
      const lineUserId = userData[i][lineUserIdIndex];
      
      if ((role === 'Manager' || role === 'Planner') && lineUserId) {
        targetUsers.push(lineUserId);
      }
    }
    
    if (targetUsers.length === 0) {
      Logger.log('‚ö†Ô∏è No internal users found to notify');
      return;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° event type
    let messageText = '';
    switch (eventType) {
      case 'quotation_approved':
        messageText = `‚úÖ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
                     `üìã ${jobId}\n` +
                     `üè¢ ${data.customer}\n\n` +
                     `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠`;
        break;
      case 'quotation_rejected':
        messageText = `‚ùå ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤\n\n` +
                     `üìã ${jobId}\n\n` +
                     `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤`;
        break;
    }
    
    const message = {
      type: 'text',
      text: messageText
    };
    
    // ‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    targetUsers.forEach(lineUserId => {
      try {
        pushMessage(lineUserId, [message], true); // true = Internal OA
        Logger.log(`‚úì Notified internal user: ${lineUserId}`);
      } catch (pushError) {
        Logger.log(`‚úó Failed to notify ${lineUserId}: ${pushError.message}`);
      }
    });
    
  } catch (error) {
    logError('notifyInternalTeam error', { 
      jobId: jobId, 
      eventType: eventType, 
      error: error.message 
    });
  }
}
