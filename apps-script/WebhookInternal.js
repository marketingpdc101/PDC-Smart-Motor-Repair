/**
 * PDC Smart Motor Repair - Internal OA Webhook Handler
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Events ‡∏à‡∏≤‡∏Å Internal LINE OA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)
 */

/**
 * Handle Internal Message Event
 */
function handleInternalMessage(text, textLower, userId, replyToken) {
  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  if (text.startsWith('/')) {
    handleInternalCommand(text, userId, replyToken);
  } 
  // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà assign ‡πÉ‡∏´‡πâ
  else if (text.includes('‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') || textLower.includes('my tasks')) {
    handleMyTasks(userId, replyToken);
  }
  // ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
  else if (text.includes('‡∏á‡∏≤‡∏ô‡∏£‡∏≠') || textLower.includes('pending')) {
    handlePendingJobs(userId, replyToken);
  }
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  else if (text.includes('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô') || textLower.includes('create job')) {
    const response = {
      type: 'text',
      text: 'üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î LIFF App "Job Creation" ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    };
    replyMessage(replyToken, [response], true);
  }
  // ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  else if (text.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') || textLower.includes('help')) {
    handleInternalHelp(replyToken);
  }
  // Default
  else {
    const response = {
      type: 'text',
      text: 'üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!\n\n‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ' + text + '\n\n‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á'
    };
    replyMessage(replyToken, [response], true);
  }
}

/**
 * Handle Internal Commands (‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á / ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)
 */
function handleInternalCommand(command, userId, replyToken) {
  const cmd = command.split(' ')[0].toLowerCase();
  const args = command.split(' ').slice(1);
  
  switch (cmd) {
    case '/help':
      handleInternalHelp(replyToken);
      break;
      
    case '/jobs':
      handleJobsList(args[0] || 'all', replyToken);
      break;
      
    case '/job':
      if (args[0]) {
        handleJobDetail(args[0], replyToken);
      } else {
        replyMessage(replyToken, [{
          type: 'text',
          text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Job ID\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /job PDC-202510-0001'
        }], true);
      }
      break;
      
    case '/pending':
      handlePendingJobs(userId, replyToken);
      break;
      
    case '/mytasks':
      handleMyTasks(userId, replyToken);
      break;
      
    case '/stats':
      handleStats(replyToken);
      break;
      
    case '/approve':
      if (args[0]) {
        handleQuickApprove(args[0], userId, replyToken);
      } else {
        replyMessage(replyToken, [{
          type: 'text',
          text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Job ID\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /approve PDC-202510-0001'
        }], true);
      }
      break;
      
    default:
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ' + cmd + '\n\n‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
      }], true);
  }
}

/**
 * Internal Help Command
 */
function handleInternalHelp(replyToken) {
  const response = {
    type: 'text',
    text: 'üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:\n\n' +
          'üîß ‡∏á‡∏≤‡∏ô:\n' +
          '‚Ä¢ /jobs [all|pending|progress] - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n' +
          '‚Ä¢ /job [JOB_ID] - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô\n' +
          '‚Ä¢ /pending - ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£\n' +
          '‚Ä¢ /mytasks - ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà assign ‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô\n' +
          '‚Ä¢ /approve [JOB_ID] - ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß\n\n' +
          'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:\n' +
          '‚Ä¢ /stats - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°\n\n' +
          '‚ùì ‡∏≠‡∏∑‡πà‡∏ô‡πÜ:\n' +
          '‚Ä¢ /help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n\n' +
          'üí° ‡πÉ‡∏ä‡πâ Rich Menu ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!'
  };
  replyMessage(replyToken, [response], true);
}

/**
 * Get Jobs List
 */
function handleJobsList(filter, replyToken) {
  try {
    const sheet = getSheet(CONFIG.SHEETS.JOBS);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    let jobs = [];
    for (let i = 1; i < data.length; i++) {
      const job = arrayToObject(headers, data[i]);
      
      if (filter === 'all' || 
          (filter === 'pending' && job.status === CONFIG.STATUS.PENDING_APPROVAL) ||
          (filter === 'progress' && job.status === CONFIG.STATUS.IN_PROGRESS)) {
        jobs.push(job);
      }
    }
    
    jobs = jobs.slice(0, 10); // ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏á‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
    
    if (jobs.length === 0) {
      replyMessage(replyToken, [{
        type: 'text',
        text: 'üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      }], true);
      return;
    }
    
    let text = `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô (${filter}):\n\n`;
    jobs.forEach((job, index) => {
      text += `${index + 1}. ${job.job_id}\n`;
      text += `   ${job.customer_name}\n`;
      text += `   ${job.asset_desc}\n`;
      text += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${job.status}\n`;
      text += `   ${job.milestone}\n\n`;
    });
    
    text += `‡πÅ‡∏™‡∏î‡∏á ${jobs.length} ‡∏á‡∏≤‡∏ô\n`;
    text += `‡∏û‡∏¥‡∏°‡∏û‡πå /job [JOB_ID] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î`;
    
    replyMessage(replyToken, [{ type: 'text', text: text }], true);
  } catch (error) {
    logError('handleJobsList error', { error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Get Job Detail
 */
function handleJobDetail(jobId, replyToken) {
  try {
    const job = getJob(jobId);
    
    if (!job) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô: ${jobId}`
      }], true);
      return;
    }
    
    const items = getJobItems(jobId);
    
    let text = `üìã ${job.job_id}\n\n`;
    text += `üè¢ ${job.customer_name}\n`;
    text += `üìû ${job.company}\n`;
    text += `‚öôÔ∏è ${job.asset_desc}\n`;
    text += `üè≠ ${job.brand} ${job.model}\n`;
    text += `üìä ${job.status}\n`;
    text += `üîÑ ${job.milestone}\n`;
    text += `üí∞ ‡∏ø${(job.quotation_amount || 0).toLocaleString()}\n`;
    text += `üìÖ ${formatDate(job.eta_finish)}\n\n`;
    
    if (items.length > 0) {
      text += `üîß ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏° (${items.length}):\n`;
      items.forEach((item, index) => {
        text += `${index + 1}. ${item.title}\n`;
        text += `   ‡∏ø${item.subtotal.toLocaleString()}\n`;
      });
    }
    
    text += `\nüìù Notes: ${job.notes || '-'}`;
    
    replyMessage(replyToken, [{ type: 'text', text: text }], true);
  } catch (error) {
    logError('handleJobDetail error', { jobId: jobId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Get Pending Jobs
 */
function handlePendingJobs(userId, replyToken) {
  handleJobsList('pending', replyToken);
}

/**
 * Get My Tasks
 */
function handleMyTasks(userId, replyToken) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
    const user = getUserByLineUserId(userId);
    
    if (!user) {
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
      }], true);
      return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà assign ‡πÉ‡∏´‡πâ user ‡∏ô‡∏µ‡πâ
    const sheet = getSheet(CONFIG.SHEETS.JOBS);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const jobs = [];
    for (let i = 1; i < data.length; i++) {
      const job = arrayToObject(headers, data[i]);
      
      // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° field assigned_to ‡πÉ‡∏ô Jobs sheet
      // if (job.assigned_to === user.user_id && job.status === 'IN_PROGRESS')
      if (job.status === CONFIG.STATUS.IN_PROGRESS) {
        jobs.push(job);
      }
    }
    
    if (jobs.length === 0) {
      replyMessage(replyToken, [{
        type: 'text',
        text: 'üìã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà assign ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì'
      }], true);
      return;
    }
    
    let text = `üìã ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (${jobs.length}):\n\n`;
    jobs.forEach((job, index) => {
      text += `${index + 1}. ${job.job_id}\n`;
      text += `   ${job.asset_desc}\n`;
      text += `   ${job.milestone}\n\n`;
    });
    
    replyMessage(replyToken, [{ type: 'text', text: text }], true);
  } catch (error) {
    logError('handleMyTasks error', { userId: userId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Get Stats
 */
function handleStats(replyToken) {
  try {
    const sheet = getSheet(CONFIG.SHEETS.JOBS);
    const data = sheet.getDataRange().getValues();
    
    let total = data.length - 1;
    let draft = 0;
    let pending = 0;
    let approved = 0;
    let progress = 0;
    let completed = 0;
    let delivered = 0;
    let cancelled = 0;
    
    for (let i = 1; i < data.length; i++) {
      const status = data[i][9]; // status column
      switch (status) {
        case CONFIG.STATUS.DRAFT:
          draft++;
          break;
        case CONFIG.STATUS.PENDING_APPROVAL:
          pending++;
          break;
        case CONFIG.STATUS.APPROVED:
          approved++;
          break;
        case CONFIG.STATUS.IN_PROGRESS:
          progress++;
          break;
        case CONFIG.STATUS.COMPLETED:
          completed++;
          break;
        case CONFIG.STATUS.DELIVERED:
          delivered++;
          break;
        case CONFIG.STATUS.CANCELLED:
          cancelled++;
          break;
      }
    }
    
    const text = `üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:\n\n` +
                 `üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${total}\n\n` +
                 `üìù Draft: ${draft}\n` +
                 `‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${pending}\n` +
                 `‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß: ${approved}\n` +
                 `üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${progress}\n` +
                 `‚úîÔ∏è ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${completed}\n` +
                 `üì¶ ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${delivered}\n` +
                 `‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ${cancelled}\n\n` +
                 `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: ${new Date().toLocaleString('th-TH')}`;
    
    replyMessage(replyToken, [{ type: 'text', text: text }], true);
  } catch (error) {
    logError('handleStats error', { error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Quick Approve Job
 */
function handleQuickApprove(jobId, userId, replyToken) {
  try {
    const user = getUserByLineUserId(userId);
    
    if (!user) {
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      }], true);
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Manager/Planner)
    if (user.role !== 'Manager' && user.role !== 'Planner') {
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô\n‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Manager/Planner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }], true);
      return;
    }
    
    // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
    const result = approveQuotation(jobId, userId, 'Approved via LINE command');
    
    if (result.success) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n${jobId}\n\n‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Work Order ‡πÅ‡∏•‡πâ‡∏ß`
      }], true);
    } else {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ${result.error}`
      }], true);
    }
  } catch (error) {
    logError('handleQuickApprove error', { jobId: jobId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Handle Internal Postback (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)
 */
function handleInternalPostback(action, jobId, userId, replyToken, data) {
  switch (action) {
    case 'assign_job':
      handleAssignJob(jobId, userId, replyToken);
      break;
      
    case 'start_job':
      handleStartJob(jobId, userId, replyToken);
      break;
      
    case 'complete_milestone':
      handleCompleteMilestone(jobId, data.milestone, userId, replyToken);
      break;
      
    case 'view_job':
      handleViewJobInternal(jobId, replyToken);
      break;
      
    case 'view_pdf':
      handleViewPDFInternal(userId, jobId, data.type, replyToken);
      break;
      
    case 'update_status':
      handleUpdateStatusPostback(jobId, data.status, userId, replyToken);
      break;
      
    default:
      Logger.log('Unknown internal postback action: ' + action);
      replyMessage(replyToken, [{
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ' + action
      }], true);
  }
}

/**
 * Handle Assign Job
 */
function handleAssignJob(jobId, userId, replyToken) {
  try {
    // TODO: Implement assign job logic
    replyMessage(replyToken, [{
      type: 'text',
      text: `‚úÖ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô ${jobId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`
    }], true);
  } catch (error) {
    logError('handleAssignJob error', { jobId: jobId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Handle Start Job
 */
function handleStartJob(jobId, userId, replyToken) {
  try {
    updateJobStatus(jobId, CONFIG.STATUS.IN_PROGRESS, 'Staff (LINE)');
    
    replyMessage(replyToken, [{
      type: 'text',
      text: `‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô ${jobId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`
    }], true);
  } catch (error) {
    logError('handleStartJob error', { jobId: jobId, error: error.message });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Handle Complete Milestone
 */
function handleCompleteMilestone(jobId, milestone, userId, replyToken) {
  try {
    updateJobMilestone(jobId, milestone, 'Staff (LINE)', '', []);
    
    replyMessage(replyToken, [{
      type: 'text',
      text: `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n${jobId}\n‚Üí ${milestone}`
    }], true);
  } catch (error) {
    logError('handleCompleteMilestone error', { 
      jobId: jobId, 
      milestone: milestone, 
      error: error.message 
    });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Handle View Job Internal
 */
function handleViewJobInternal(jobId, replyToken) {
  handleJobDetail(jobId, replyToken);
}

/**
 * Handle View PDF Internal
 */
function handleViewPDFInternal(userId, jobId, type, replyToken) {
  try {
    const job = getJob(jobId);
    
    if (!job) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô: ${jobId}`
      }], true);
      return;
    }
    
    let pdfUrl = '';
    let pdfName = '';
    
    switch (type) {
      case 'quotation':
        pdfUrl = job.quotation_pdf;
        pdfName = '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤';
        break;
      case 'workorder':
        pdfUrl = job.workorder_pdf;
        pdfName = '‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô';
        break;
      case 'finalreport':
        pdfUrl = job.final_report_pdf;
        pdfName = '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢';
        break;
    }
    
    if (!pdfUrl) {
      replyMessage(replyToken, [{
        type: 'text',
        text: `‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ${pdfName}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô`
      }], true);
      return;
    }
    
    replyMessage(replyToken, [{
      type: 'text',
      text: `üìÑ ${pdfName}\n\n${jobId}\n\n${pdfUrl}`
    }], true);
  } catch (error) {
    logError('handleViewPDFInternal error', { 
      jobId: jobId, 
      type: type, 
      error: error.message 
    });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Handle Update Status Postback
 */
function handleUpdateStatusPostback(jobId, status, userId, replyToken) {
  try {
    updateJobStatus(jobId, status, 'Staff (LINE)');
    
    replyMessage(replyToken, [{
      type: 'text',
      text: `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n${jobId}\n‚Üí ${status}`
    }], true);
  } catch (error) {
    logError('handleUpdateStatusPostback error', { 
      jobId: jobId, 
      status: status, 
      error: error.message 
    });
    replyMessage(replyToken, [{
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    }], true);
  }
}

/**
 * Handle Internal Follow Event (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô Add Friend)
 */
function handleInternalFollowEvent(userId, replyToken) {
  logInfo('üëã New internal user (employee) followed!', { userId: userId });
  
  const welcomeMessage = {
    type: 'text',
    text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà PDC Smart Motor Repair!\n\n' +
          'üë®‚Äçüîß Internal OA (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)\n\n' +
          'üì± ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n' +
          '‚Ä¢ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
          '‚Ä¢ ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢\n' +
          '‚Ä¢ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô\n' +
          '‚Ä¢ ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°\n\n' +
          '‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
  };
  
  try {
    pushMessage(userId, [welcomeMessage], true);
    logInfo('‚úÖ Internal welcome message sent', { userId: userId });
  } catch (error) {
    logError('‚ùå Failed to send internal welcome message', { 
      userId: userId, 
      error: error.message 
    });
  }
}

/**
 * Get User by LINE User ID (Internal)
 */
function getUserByLineUserId(lineUserId) {
  try {
    const sheet = getSheet(CONFIG.SHEETS.USERS);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    const lineUserIdIndex = headers.indexOf('internal_line_user_id');
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][lineUserIdIndex] === lineUserId) {
        return arrayToObject(headers, data[i]);
      }
    }
    
    return null;
  } catch (error) {
    logError('getUserByLineUserId error', { lineUserId: lineUserId, error: error.message });
    return null;
  }
}
