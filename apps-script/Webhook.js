/**
 * PDC Smart Motor Repair - Webhook Handlers
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Events ‡∏à‡∏≤‡∏Å LINE Webhook
 */

/**
 * Handle LINE Event
 */
function handleLineEvent(event) {
  const eventType = event.type;
  
  switch (eventType) {
    case 'message':
      handleMessageEvent(event);
      break;
    case 'postback':
      handlePostbackEvent(event);
      break;
    case 'follow':
      handleFollowEvent(event);
      break;
    case 'unfollow':
      handleUnfollowEvent(event);
      break;
    default:
      Logger.log('Unknown event type: ' + eventType);
  }
}

/**
 * Handle Message Event
 */
function handleMessageEvent(event) {
  const userId = event.source.userId;
  const messageType = event.message.type;
  const replyToken = event.replyToken;
  
  if (messageType === 'text') {
    const text = event.message.text;
    const textLower = text.toLowerCase();
    
    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ lowercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
    if (text.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') || textLower.includes('status')) {
      const response = {
        type: 'text',
        text: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà 02-xxx-xxxx'
      };
      replyMessage(replyToken, [response], false); // false = ‡πÉ‡∏ä‡πâ External OA
    } else if (text.includes('‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') || textLower.includes('my jobs')) {
      const response = {
        type: 'text',
        text: 'üîß ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô"'
      };
      replyMessage(replyToken, [response], false); // false = ‡πÉ‡∏ä‡πâ External OA
    } else if (text.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') || textLower.includes('help')) {
      const response = {
        type: 'text',
        text: 'üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n' +
              '‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n' +
              '‚Ä¢ "‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" - ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
              '‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n' +
              '‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!'
      };
      replyMessage(replyToken, [response], false); // false = ‡πÉ‡∏ä‡πâ External OA
    } else {
      // Default response - ‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      const response = {
        type: 'text',
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå: "' + text + '"\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ PDC Motor Repair\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
      };
      
      try {
        replyMessage(replyToken, [response], false); // false = ‡πÉ‡∏ä‡πâ External OA
        Logger.log('‚úÖ replyMessage completed');
      } catch (error) {
        Logger.log('‚ùå replyMessage error: ' + error.message);
        console.error('replyMessage error:', error);
      }
    }
  }
}

/**
 * Handle Postback Event (‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° Flex Message)
 */
function handlePostbackEvent(event) {
  const userId = event.source.userId;
  const replyToken = event.replyToken;
  const data = parsePostbackData(event.postback.data);
  
  const action = data.action;
  const jobId = data.job_id;
  
  switch (action) {
    case 'approve':
      handleApproveQuotation(userId, jobId, replyToken);
      break;
    case 'reject':
      handleRejectQuotation(userId, jobId, replyToken);
      break;
    case 'view_pdf':
      handleViewPDF(userId, jobId, data.type, replyToken);
      break;
    case 'view_photos':
      handleViewPhotos(userId, jobId, replyToken);
      break;
    default:
      Logger.log('Unknown postback action: ' + action);
  }
}

/**
 * Handle Follow Event (‡πÄ‡∏°‡∏∑‡πà‡∏≠ Add Friend)
 */
function handleFollowEvent(event) {
  const userId = event.source.userId;
  
  logInfo('üëã New follower!', { userId: userId });
  
  const welcomeMessage = {
    type: 'text',
    text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà PDC Smart Motor Repair!\n\n' +
          '‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á\n' +
          '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤\n\n' +
          '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
  };
  
  try {
    pushMessage(userId, [welcomeMessage], false);
    logInfo('‚úÖ Welcome message sent', { userId: userId });
  } catch (error) {
    logError('‚ùå Failed to send welcome message', { 
      userId: userId, 
      error: error.message 
    });
  }
}

/**
 * Handle Unfollow Event (‡πÄ‡∏°‡∏∑‡πà‡∏≠ Block)
 */
function handleUnfollowEvent(event) {
  const userId = event.source.userId;
  Logger.log(`User ${userId} unfollowed`);
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Database (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
}

/**
 * Handle Status Command
 */
function handleStatusCommand(userId, replyToken) {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å line_user_id
  const jobs = getJobsByLineUserId(userId);
  
  if (jobs.length === 0) {
    const response = {
      type: 'text',
      text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'
    };
    replyMessage(replyToken, response, false);
    return;
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const job = jobs[0];
  const milestone = getMilestoneDisplayText(job.milestone);
  
  const response = {
    type: 'text',
    text: `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô\n\n` +
          `Job ID: ${job.job_id}\n` +
          `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£: ${job.asset_desc}\n` +
          `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${milestone}\n` +
          `‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: ${formatDate(job.eta_finish)}`
  };
  
  replyMessage(replyToken, response, false);
}

/**
 * Handle My Jobs Command
 */
function handleMyJobsCommand(userId, replyToken) {
  const jobs = getJobsByLineUserId(userId);
  
  if (jobs.length === 0) {
    const response = {
      type: 'text',
      text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    };
    replyMessage(replyToken, response, false);
    return;
  }
  
  let text = 'üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n\n';
  jobs.forEach((job, index) => {
    text += `${index + 1}. ${job.job_id}\n`;
    text += `   ${job.asset_desc}\n`;
    text += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getMilestoneDisplayText(job.milestone)}\n\n`;
  });
  
  const response = {
    type: 'text',
    text: text
  };
  
  replyMessage(replyToken, response, false);
}

/**
 * Handle Help Command
 */
function handleHelpCommand(replyToken) {
  const response = {
    type: 'text',
    text: 'üìñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n' +
          '‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n' +
          '‚Ä¢ "‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" - ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n' +
          '‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n' +
          '‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!'
  };
  
  replyMessage(replyToken, response, false);
}

/**
 * Handle Approve Quotation
 */
function handleApproveQuotation(userId, jobId, replyToken) {
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Approved
  const result = updateJobStatus(jobId, CONFIG.STATUS.APPROVED, 'Customer (LINE)');
  
  if (result) {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Approval
    const sheet = getSheet(CONFIG.SHEETS.APPROVALS);
    sheet.appendRow([
      generateId('APPROVAL'),
      jobId,
      '', // quotation_no
      userId,
      'Customer', // approved_name
      '', // company
      '', // po_no
      '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô LINE',
      new Date(),
      'LINE',
      replyToken
    ]);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Work Order ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const workOrderUrl = generateWorkOrderPDF(jobId);
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
    notifyInternalTeam(jobId, 'quotation_approved');
    
    const response = {
      type: 'text',
      text: '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n' +
            '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ\n' +
            '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤'
    };
    
    replyMessage(replyToken, response, false);
  } else {
    const response = {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
    };
    replyMessage(replyToken, response, false);
  }
}

/**
 * Handle Reject Quotation
 */
function handleRejectQuotation(userId, jobId, replyToken) {
  updateJobStatus(jobId, CONFIG.STATUS.CANCELLED, 'Customer (LINE)');
  
  logEvent(jobId, 'quotation_rejected', 'Customer', {
    line_user_id: userId
  });
  
  const response = {
    type: 'text',
    text: '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß\n' +
          '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏£‡∏≤\n' +
          '‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢'
  };
  
  replyMessage(replyToken, response, false);
}

/**
 * Handle View PDF
 */
function handleViewPDF(userId, jobId, type, replyToken) {
  const job = getJob(jobId);
  
  let pdfUrl = '';
  let docName = '';
  
  switch (type) {
    case 'quotation':
      pdfUrl = job.quotation_pdf;
      docName = '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤';
      break;
    case 'workorder':
      pdfUrl = job.workorder_pdf;
      docName = '‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô';
      break;
    case 'finalreport':
      pdfUrl = job.final_report_pdf;
      docName = '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢';
      break;
  }
  
  if (pdfUrl) {
    const response = {
      type: 'text',
      text: `üìÑ ${docName}\n${pdfUrl}`
    };
    replyMessage(replyToken, response, false);
  } else {
    const response = {
      type: 'text',
      text: `‡πÑ‡∏°‡πà‡∏û‡∏ö ${docName} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`
    };
    replyMessage(replyToken, response, false);
  }
}

/**
 * Handle View Photos
 */
function handleViewPhotos(userId, jobId, replyToken) {
  const beforePhotos = getMediaByJob(jobId, 'before');
  const afterPhotos = getMediaByJob(jobId, 'after');
  
  const messages = [];
  
  if (beforePhotos.length > 0) {
    messages.push({
      type: 'text',
      text: 'üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏° (Before)'
    });
    
    beforePhotos.slice(0, 3).forEach(photo => {
      messages.push({
        type: 'image',
        originalContentUrl: photo.webapp_url,
        previewImageUrl: photo.thumbnail_url || photo.webapp_url
      });
    });
  }
  
  if (afterPhotos.length > 0) {
    messages.push({
      type: 'text',
      text: 'üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏° (After)'
    });
    
    afterPhotos.slice(0, 3).forEach(photo => {
      messages.push({
        type: 'image',
        originalContentUrl: photo.webapp_url,
        previewImageUrl: photo.thumbnail_url || photo.webapp_url
      });
    });
  }
  
  if (messages.length === 0) {
    messages.push({
      type: 'text',
      text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
  
  replyMessage(replyToken, messages, false);
}

/**
 * Parse Postback Data
 */
function parsePostbackData(dataString) {
  const params = {};
  dataString.split('&').forEach(param => {
    const [key, value] = param.split('=');
    params[key] = decodeURIComponent(value);
  });
  return params;
}

/**
 * Get Jobs by LINE User ID
 */
function getJobsByLineUserId(lineUserId) {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ customer_id ‡∏à‡∏≤‡∏Å line_user_id
  const customerSheet = getSheet(CONFIG.SHEETS.CUSTOMERS);
  const customerData = customerSheet.getDataRange().getValues();
  const customerHeaders = customerData[0];
  const lineUserIdIndex = customerHeaders.indexOf('line_user_id');
  const customerIdIndex = customerHeaders.indexOf('customer_id');
  
  let customerId = null;
  for (let i = 1; i < customerData.length; i++) {
    if (customerData[i][lineUserIdIndex] === lineUserId) {
      customerId = customerData[i][customerIdIndex];
      break;
    }
  }
  
  if (!customerId) return [];
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  const jobSheet = getSheet(CONFIG.SHEETS.JOBS);
  const jobData = jobSheet.getDataRange().getValues();
  const jobHeaders = jobData[0];
  const jobs = [];
  
  for (let i = 1; i < jobData.length; i++) {
    if (jobData[i][1] === customerId) { // customer_id column
      jobs.push(arrayToObject(jobHeaders, jobData[i]));
    }
  }
  
  return jobs;
}

/**
 * Notify Internal Team
 */
function notifyInternalTeam(jobId, eventType) {
  // TODO: ‡∏™‡πà‡∏á LINE notification ‡πÑ‡∏õ‡∏´‡∏≤ Planner/Sales
  Logger.log(`Notifying internal team about ${eventType} for job ${jobId}`);
}

/**
 * Format Date
 */
function formatDate(date) {
  if (!date) return '-';
  const d = new Date(date);
  return d.toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}