/**
 * PDC Smart Motor Repair - LINE API Integration
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á LINE Messages, Flex Messages, ‡πÅ‡∏•‡∏∞ Push Notifications
 */

/**
 * ‡∏™‡πà‡∏á Push Message ‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
function pushMessage(userId, message, isInternal = true) {
  const token = isInternal ? 
    CONFIG.LINE.INTERNAL_CHANNEL_ACCESS_TOKEN : 
    CONFIG.LINE.EXTERNAL_CHANNEL_ACCESS_TOKEN;
  
  const url = CONFIG.LINE.PUSH_API_URL;
  
  const payload = {
    to: userId,
    messages: Array.isArray(message) ? message : [message]
  };
  
  const options = {
    method: 'post',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + token
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };
  
  try {
    const response = UrlFetchApp.fetch(url, options);
    const result = JSON.parse(response.getContentText());
    
    if (response.getResponseCode() !== 200) {
      Logger.log('LINE API Error: ' + JSON.stringify(result));
      return false;
    }
    
    return true;
  } catch (error) {
    Logger.log('Error pushing message: ' + error.message);
    return false;
  }
}

/**
 * Reply Message (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Webhook Event)
 */
function replyMessage(replyToken, message, isInternal = true) {
  const token = isInternal ? 
    CONFIG.LINE.INTERNAL_CHANNEL_ACCESS_TOKEN : 
    CONFIG.LINE.EXTERNAL_CHANNEL_ACCESS_TOKEN;
  
  const url = CONFIG.LINE.REPLY_API_URL;
  
  const payload = {
    replyToken: replyToken,
    messages: Array.isArray(message) ? message : [message]
  };
  
  const options = {
    method: 'post',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + token
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };
  
  try {
    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    
    // Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô error
    if (responseCode !== 200) {
      const responseBody = response.getContentText();
      Logger.log('LINE API Error: ' + responseCode + ' - ' + responseBody);
    }
    
    return responseCode === 200;
  } catch (error) {
    Logger.log('ERROR replying message: ' + error.message);
    return false;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
 */
function createQuotationFlexMessage(job, items, totalAmount) {
  return {
    type: 'flex',
    altText: `‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ${job.quotation_no}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìÑ ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
            weight: 'bold',
            size: 'xl',
            color: '#FFFFFF'
          },
          {
            type: 'text',
            text: job.quotation_no,
            size: 'sm',
            color: '#FFFFFF'
          }
        ],
        backgroundColor: '#4285F4'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: job.company || job.customer_name,
            weight: 'bold',
            size: 'lg',
            wrap: true
          },
          {
            type: 'text',
            text: job.asset_desc,
            size: 'sm',
            color: '#666666',
            wrap: true,
            margin: 'md'
          },
          {
            type: 'separator',
            margin: 'lg'
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: items.slice(0, 5).map(item => ({
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: item.title,
                  size: 'sm',
                  color: '#555555',
                  flex: 3,
                  wrap: true
                },
                {
                  type: 'text',
                  text: formatCurrency(item.subtotal),
                  size: 'sm',
                  color: '#111111',
                  align: 'end',
                  flex: 1
                }
              ]
            }))
          },
          {
            type: 'separator',
            margin: 'lg'
          },
          {
            type: 'box',
            layout: 'horizontal',
            margin: 'lg',
            contents: [
              {
                type: 'text',
                text: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô',
                weight: 'bold',
                size: 'md'
              },
              {
                type: 'text',
                text: formatCurrency(totalAmount),
                weight: 'bold',
                size: 'md',
                color: '#EA4335',
                align: 'end'
              }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        spacing: 'sm',
        contents: [
          {
            type: 'button',
            style: 'primary',
            action: {
              type: 'postback',
              label: '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
              data: `action=approve&job_id=${job.job_id}`
            },
            color: '#34A853'
          },
          {
            type: 'button',
            style: 'secondary',
            action: {
              type: 'postback',
              label: 'üìÑ ‡∏î‡∏π PDF',
              data: `action=view_pdf&job_id=${job.job_id}&type=quotation`
            }
          },
          {
            type: 'button',
            style: 'secondary',
            action: {
              type: 'postback',
              label: '‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
              data: `action=reject&job_id=${job.job_id}`
            }
          }
        ]
      }
    }
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status Update
 */
function createStatusUpdateFlexMessage(job, milestone, note, photos) {
  const milestoneText = getMilestoneDisplayText(milestone);
  const photoContents = photos && photos.length > 0 ? [
    {
      type: 'separator',
      margin: 'lg'
    },
    {
      type: 'text',
      text: 'üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
      weight: 'bold',
      margin: 'lg'
    },
    ...photos.slice(0, 3).map(photo => ({
      type: 'image',
      url: photo.thumbnail_url || photo.webapp_url,
      size: 'full',
      aspectMode: 'cover',
      aspectRatio: '16:9',
      margin: 'md'
    }))
  ] : [];
  
  return {
    type: 'flex',
    altText: `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${milestoneText}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üîî ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô',
            weight: 'bold',
            size: 'lg',
            color: '#FFFFFF'
          },
          {
            type: 'text',
            text: job.job_id,
            size: 'sm',
            color: '#FFFFFF'
          }
        ],
        backgroundColor: '#FBBC04'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: milestoneText,
            weight: 'bold',
            size: 'xl',
            color: '#34A853'
          },
          {
            type: 'text',
            text: job.asset_desc,
            size: 'sm',
            color: '#666666',
            wrap: true,
            margin: 'md'
          },
          {
            type: 'separator',
            margin: 'lg'
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: [
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  {
                    type: 'text',
                    text: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:',
                    size: 'sm',
                    color: '#666666',
                    flex: 0
                  },
                  {
                    type: 'text',
                    text: note || '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥',
                    size: 'sm',
                    wrap: true,
                    margin: 'md'
                  }
                ]
              }
            ]
          },
          ...photoContents
        ]
      }
    }
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
 */
function createFinalReportFlexMessage(job, testResult) {
  return {
    type: 'flex',
    altText: `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ${job.final_report_no}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
            weight: 'bold',
            size: 'xl',
            color: '#FFFFFF'
          },
          {
            type: 'text',
            text: job.final_report_no,
            size: 'sm',
            color: '#FFFFFF'
          }
        ],
        backgroundColor: '#34A853'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: job.company || job.customer_name,
            weight: 'bold',
            size: 'lg',
            wrap: true
          },
          {
            type: 'text',
            text: job.asset_desc,
            size: 'sm',
            color: '#666666',
            wrap: true,
            margin: 'sm'
          },
          {
            type: 'separator',
            margin: 'lg'
          },
          {
            type: 'text',
            text: 'üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            weight: 'bold',
            margin: 'lg'
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'md',
            spacing: 'sm',
            contents: testResult ? [
              createInfoRow('‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü', `${testResult.voltage_v} V`),
              createInfoRow('‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÑ‡∏ü', `${testResult.current_a} A`),
              createInfoRow('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏£‡∏≠‡∏ö', `${testResult.rpm} RPM`),
              createInfoRow('‡∏Ñ‡πà‡∏≤ IR', `${testResult.ir_mohm} MŒ©`),
              createInfoRow('Vibration', `${testResult.vibration_mm_s} mm/s`),
              createInfoRow('‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥', `${testResult.temperature_c} ¬∞C`),
              createInfoRow('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö', testResult.pass_fail, testResult.pass_fail === 'PASS' ? '#34A853' : '#EA4335')
            ] : [
              {
                type: 'text',
                text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                size: 'sm',
                color: '#999999'
              }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        spacing: 'sm',
        contents: [
          {
            type: 'button',
            style: 'primary',
            action: {
              type: 'uri',
              label: 'üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF',
              uri: job.final_report_pdf || 'https://www.google.com'
            },
            color: '#4285F4'
          },
          {
            type: 'button',
            style: 'secondary',
            action: {
              type: 'postback',
              label: 'üñºÔ∏è ‡∏î‡∏π‡∏†‡∏≤‡∏û Before/After',
              data: `action=view_photos&job_id=${job.job_id}`
            }
          }
        ]
      }
    }
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Info Row ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flex Message
 */
function createInfoRow(label, value, valueColor = '#111111') {
  return {
    type: 'box',
    layout: 'horizontal',
    contents: [
      {
        type: 'text',
        text: label,
        size: 'sm',
        color: '#666666',
        flex: 2
      },
      {
        type: 'text',
        text: String(value),
        size: 'sm',
        color: valueColor,
        align: 'end',
        flex: 3,
        wrap: true
      }
    ]
  };
}

/**
 * Get Milestone Display Text (‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
 */
function getMilestoneDisplayText(milestone) {
  const map = {
    'Received': '‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô',
    'Inspection': '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô',
    'Disassembly': '‡∏ñ‡∏≠‡∏î‡πÅ‡∏¢‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô',
    'Burnout': '‡πÄ‡∏ú‡∏≤‡∏Ç‡∏î‡∏•‡∏ß‡∏î',
    'Core': '‡∏ó‡∏≥ Core',
    'Rewinding': '‡∏û‡∏±‡∏ô‡∏Ç‡∏î‡∏•‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà',
    'Varnish': '‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö Varnish',
    'Assembly': '‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö',
    'Balancing': '‡∏ñ‡πà‡∏ß‡∏á‡πÅ‡∏ö‡∏•‡∏≤‡∏ô‡∏ã‡πå',
    'Painting': '‡∏û‡πà‡∏ô‡∏™‡∏µ',
    'QC': '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
    'Final_Test': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
    'Packing': '‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏´‡∏µ‡∏ö‡∏´‡πà‡∏≠',
    'Delivery': '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö'
  };
  
  return map[milestone] || milestone;
}

/**
 * Format Currency (‡∏ö‡∏≤‡∏ó)
 */
function formatCurrency(amount) {
  return '‡∏ø' + Number(amount).toLocaleString('th-TH', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE API
 */
function testLineAPI() {
  Logger.log('=== Testing LINE API ===');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
  const job = {
    job_id: 'PDC-202510-0001',
    quotation_no: 'Q-202510-0001',
    company: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
    customer_name: '‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    asset_desc: '‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 50 HP',
    final_report_no: 'FR-202510-0001',
    final_report_pdf: 'https://drive.google.com/file/d/xxx'
  };
  
  const items = [
    { title: '‡∏û‡∏±‡∏ô‡∏Ç‡∏î‡∏•‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà', subtotal: 18000 },
    { title: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Bearing', subtotal: 1700 }
  ];
  
  const flexQuotation = createQuotationFlexMessage(job, items, 19700);
  Logger.log('Quotation Flex Message: ' + JSON.stringify(flexQuotation, null, 2));
  
  const flexStatus = createStatusUpdateFlexMessage(job, 'Rewinding', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏ô‡∏Ç‡∏î‡∏•‡∏ß‡∏î', []);
  Logger.log('Status Update Flex Message: ' + JSON.stringify(flexStatus, null, 2));
  
  const testResult = {
    voltage_v: 380,
    current_a: 85,
    rpm: 1450,
    ir_mohm: 50,
    vibration_mm_s: 2.8,
    temperature_c: 65,
    pass_fail: 'PASS'
  };
  
  const flexFinal = createFinalReportFlexMessage(job, testResult);
  Logger.log('Final Report Flex Message: ' + JSON.stringify(flexFinal, null, 2));
  
  Logger.log('‚úÖ LINE API Test Complete');
}